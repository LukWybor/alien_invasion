import sys

import pygame

from bullet import Bullet
from alien import Alien

def check_keydown_events(event, game_settings, screen, ship, bullets):
    """Respond to keypresses"""
    
    #Move the ship to the right
    if event.key == pygame.K_RIGHT:
        ship.moving_right = True
        
    #Move the ship to the left
    elif event.key == pygame.K_LEFT:
        ship.moving_left = True
        
    #Create a new bullet and add it to the bullets group
    elif event.key == pygame.K_SPACE:
        fire_bullet(game_settings, screen, ship, bullets)
    #Close the game
    elif event.key == pygame.K_q:
        sys.exit()
        
def check_keyup_events(event, ship):
    """Respond to key releases"""
    
    #Stops moving the ship to the right
    if event.key == pygame.K_RIGHT:
        ship.moving_right = False
        
    #Stops moving the ship to the left
    elif event.key == pygame.K_LEFT:
        ship.moving_left = False
        
def fire_bullet(game_settings, screen, ship, bullets):
    """Fire a bullet if the set limit is not reached."""
    if len(bullets) < game_settings.bullets_allowed:
        new_bullet = Bullet(game_settings, screen, ship)
        bullets.add(new_bullet)    
    
def check_events(game_settings, screen, ship, bullets):
    """Reaction to events generated by pressing a key 
    or a mouse button"""
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()
        elif event.type == pygame.KEYDOWN:
            check_keydown_events(event, game_settings, screen, ship, 
            bullets)
        elif event.type == pygame.KEYUP:
            check_keyup_events(event, ship)


def update_screen(game_settings, screen, ship, aliens, bullets):
    """Update images on the screen and flip to the new screen"""
    #Refresh the screen during each iteration of the loop
    screen.fill(game_settings.bg_color)
    #Redraw all bullets behind ship and alliens
    for bullet in bullets.sprites():
        bullet.draw_bullet()
        
    ship.blitme()
    aliens.draw(screen)

    #Display the last modified screen
    pygame.display.flip()
    
def update_bullets(bullets):
    """Update position of the bullets and remove bullets 
    that disappeared from the screen."""
    #Update bullets position
    bullets.update()
    #Delete bullets that have disappeared
    for bullet in bullets.copy():
        if bullet.rect.bottom <= 0:
            bullets.remove(bullet)
            
def get_number_alien_x(game_settings, alien_width):
    """Get number of aliens in a row"""
    available_space_x = game_settings.screen_width - 2 * alien_width
    number_aliens_x = int(available_space_x / (2 * alien_width))
    return number_aliens_x

def create_alien(game_settings, screen, aliens, alien_number):
    """Create an alien and place it in the row"""
    alien = Alien(game_settings, screen)
    alien_width = alien.rect.width
    alien.x = alien_width + 2 * alien_width * alien_number
    alien.rect.x = alien.x
    aliens.add(alien)
    
def create_fleet(game_settings, screen, aliens):
    """Create the full fleet of aliens"""
    #Create an alien and find the number of aliens in a row
    #Distance between aliens is equal to width of one alien
    alien = Alien(game_settings, screen)
    number_aliens_x = get_number_alien_x(game_settings, alien.rect.width)
    
    #Create the first row of aliens
    for alien_number in range(number_aliens_x):
        create_alien(game_settings, screen, aliens, alien_number)
